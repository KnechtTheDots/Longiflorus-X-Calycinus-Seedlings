---
format: pdf
---

```{r warning=FALSE,message=FALSE}
library(tidyverse)
source("scripts/functions.R")
df <- read.csv("data/main.csv")
set.seed(12042014)
```

### The Bayesian Bootstrap




\begin{align*}
w &\sim Dirichlet(\alpha)  \\
\mu &= \sum_{i=1}^nw_ix_i \\
\sigma &= \sqrt{\sum_{i=1}^nw_i(x_i-\sum_{i=1}^nw_ix_i)^2}
\end{align*}



### Posterior Predictive Checks

#### 1DAG

```{r warning=FALSE}
post_pred_check(df, "day_4", lik = "normal")
# post_pred_check(df, "day_4", lik = "gamma")
# post_pred_check(df, "day_4", lik = "log-normal")
```

#### 14DAG

```{r}
post_pred_check(df, "day_17", "normal")
# post_pred_check(df, "day_17", "gamma")
# post_pred_check(df, "day_17", "log-normal")
```

#### RGR

```{r}
post_pred_check(df, "rgr", "normal")
# post_pred_check(df, "rgr", "gamma")
# post_pred_check(df, "rgr", "log-normal")
```

#### Height

```{r}
post_pred_check(df, "height_122", "normal")
# post_pred_check(df, "height_122", "gamma")
# post_pred_check(df, "height_122", "log-normal")
```

### Posterior Predictive Distributions of Delta

```{r message=FALSE}

dag1 <- post_pred(df, "day_4", "normal")$delta_pp
dag14 <- post_pred(df, "day_17", "normal")$delta_pp
rgr <- post_pred(df, "rgr", "normal")$delta_pp
height <- post_pred(df, "height_122", "normal")$delta_pp

data.frame(DAG1 = dag1, DAG14= dag14, 
           RGR = rgr, Height = height) %>% 
  pivot_longer(1:4, names_to = "trait", values_to = "delta") %>% 
  mutate(trait = factor(trait, levels = c("Height", "DAG14","DAG1", "RGR"))) %>% 
  group_by(trait) %>% 
  summarise(upr = quantile(delta, .975),
            lwr = quantile(delta, .025),
            upr.5 = quantile(delta, .75),
            lwr.5 = quantile(delta, .25)) %>% 
  ggplot() +
  geom_vline(xintercept = 0, color = "grey", linewidth = 1) +
  geom_errorbarh(aes(y = trait, xmin = lwr, xmax = upr), height = 0, 
                 linewidth = 1) +
  geom_errorbarh(aes(y = trait, xmin = lwr.5, xmax = upr.5), height = 0, 
                 linewidth = 2) +
  theme_minimal() +
  labs(y = "Trait",
       x = "O(F2) - E(F2)")

```


### 

```{r}
dag1 <- post_pred(df, "day_4", "normal")$boots
dag1 <- dag1 %>% 
  pivot_longer(1:5, names_to = "line", values_to = "trait") %>% 
  group_by(line) %>% 
  summarise(mu = round(mean(trait),2),
            upr = round(quantile(trait, .975),2),
            lwr = round(quantile(trait, .025),2),
            upr.5 = round(quantile(trait, .75),2),
            lwr.5 = round(quantile(trait, .25),2)) %>% 
  mutate(trait = "1DAG")

dag14 <- post_pred(df, "day_17", "normal")$boots
dag14 <- dag14 %>% 
  pivot_longer(1:5, names_to = "line", values_to = "trait") %>% 
  group_by(line) %>% 
  summarise(mu = round(mean(trait),2),
            upr = round(quantile(trait, .975),2),
            lwr = round(quantile(trait, .025),2),
            upr.5 = round(quantile(trait, .75),2),
            lwr.5 = round(quantile(trait, .25),2)) %>% 
  mutate(trait = "14DAG")

rgr <- post_pred(df, "rgr", "normal")$boots
rgr <- rgr %>% 
  pivot_longer(1:5, names_to = "line", values_to = "trait") %>% 
  group_by(line) %>% 
  summarise(mu = round(mean(trait),2),
            upr = round(quantile(trait, .975),2),
            lwr = round(quantile(trait, .025),2),
            upr.5 = round(quantile(trait, .75),2),
            lwr.5 = round(quantile(trait, .25),2)) %>% 
  mutate(trait = "RGR")

height <- post_pred(df, "height_122", "normal")$boots
height <- height %>% 
  pivot_longer(1:5, names_to = "line", values_to = "trait") %>% 
  group_by(line) %>% 
  summarise(mu = round(mean(trait),2),
            upr = round(quantile(trait, .975),2),
            lwr = round(quantile(trait, .025),2),
            upr.5 = round(quantile(trait, .75),2),
            lwr.5 = round(quantile(trait, .25),2)) %>% 
  mutate(trait = "Height")

library(knitr)
library(kableExtra)

tab_dat <- bind_rows(dag1, dag14, rgr, height)

tab_dat %>% 
  select(Line = line, Mean = mu, "2.5%" = lwr, "25%" = lwr.5,
         "75%" = upr.5, "97.5%" = upr) %>% 
  mutate(Line = case_when(Line == "cal" ~ "Calycinus",
                          Line == "f1" ~ "F1",
                          Line == "f2" ~ "F2",
                          Line == "lon" ~ "Longiflorus",
                          Line == "e_f2" ~ "Expected F2")) %>% 
  kbl() %>% 
  kable_classic_2() %>% 
  add_header_above(c(" " = 1, "Posterior Distribution of Line Mean" = 5)) %>%
  pack_rows("1DAG",1,5) %>%
  pack_rows("14DAG",6,10) %>%
  pack_rows("RGR", 11,15) %>%
  pack_rows("Height",16,20)
```

```{r}
(p1 <- dag1 %>% 
  mutate(plon = c(0, .51, .49, .5, 1),
         group = c("a", letters[2:4], "a")) %>% 
  ggplot(aes(x = plon, y = mu, group = group, color = line)) +
  geom_line() +
  geom_errorbar(aes(x = plon, ymax = upr, ymin = lwr), width = 0, 
                linewidth = 1) +
  geom_errorbar(aes(x = plon, ymax = upr.5, ymin = lwr.5), width = 0,
                linewidth = 2) +
  scale_color_manual(values = c("black", "red", "black", "blue", "black")) +
  theme_minimal() +
  labs(x = "Proportion Longiflorus"))
```

```{r warning=FALSE, message=FALSE}
d <- read.csv("data/seed_growth_vs_seed_size.csv")

dat <- d %>% drop_na(day_17, death_day) %>% 
  mutate(size = (day_17 - mean(day_17))/sd(day_17)) %>% 
  mutate(survive = death_day - 3)

library(cmdstanr)
mod <- cmdstan_model("scripts/survival.stan")

stan_dat <- list(
  N = nrow(dat),
  y = dat$survive,
  X = matrix(c(rep(1, nrow(dat)), dat$size), ncol = 2),
  X_rep = matrix(c(rep(1,100), seq(-2,3, l = 100)),ncol = 2),
  K = 100
)

fit <- mod$sample(
  data = stan_dat,
  chains = 4,
  parallel_chains = 4
)

p <- fit$draws("p", format = "df")[,1:100]

colnames(p) <- stan_dat$X_rep[,2]

p %>% 
  pivot_longer(1:100, names_to = "size", values_to = "p") %>% 
  group_by(size) %>% 
  summarise(mu = mean(p),
            upr = quantile(p, .975),
            lwr = quantile(p, .025),
            upr.5 = quantile(p, .75),
            lwr.5 = quantile(p, .25)) %>% 
  mutate(size = as.numeric(size)) %>% 
  ggplot(aes(x = size, y = mu)) +
  geom_point(data = dat, aes(x = size, y = survive)) +
  geom_line(linewidth = 1) +
  geom_ribbon(aes(x = size, ymax = upr, ymin = lwr),
              color = "grey", alpha = .25) +
  geom_ribbon(aes(x = size, ymax = upr.5, ymin = lwr.5),
              color = "grey", alpha = .25) +
  theme_minimal()

```

